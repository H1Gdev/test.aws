openapi: 3.0.3
# [OpenAPI](https://www.openapis.org/)
# [Swagger](https://swagger.io/)
# [Redocly](https://redocly.com/)
# - bundle
# - build-docs
# - lint
info:
  title: My API
  description: |
    My API with **Amazon API Gateway** using [OpenAPI](https://www.openapis.org/).
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  version: 0.1.0
servers:
  - url: "{protocol}://{hostname}:{port}{basePath}"
    variables:
      protocol:
        enum: [http, https]
        default: https
      hostname:
        default: localhost
      port:
        default: "8080"
      basePath:
        default: /test
paths:
  /test:
    get:
      tags:
        - test
      summary: Test API Gateway mock (Get).
      operationId: GetTest
      # Method
      # Request
      parameters:
        # Reference Object
        - $ref: "#/components/parameters/Parameter0"
      # Response
      responses:
        200:
          description: 200 OK response.
          headers:
            Content-Type:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security: []
      x-amazon-apigateway-request-validator: params-only
      # Integration
      # https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-integration-settings.html
      x-amazon-apigateway-integration:
        type: mock
        # Request
        requestTemplates:
          # Mapping to 'Integration Response'.
          application/json: "{\"statusCode\": 200}"
        # Response
        responses:
          default:
            statusCode: 200
            responseParameters:
              # Mapping to 'Method Response'.
              method.response.header.Content-Type: "'application/json'"
    post:
      tags:
        - test
      summary: Test API Gateway mock (Post).
      operationId: PostTest
      # Method
      # Request
      parameters:
        - $ref: "#/components/parameters/Parameter0"
        # name is case sensitive.
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Body0"
      # Response
      responses:
        200:
          description: 200 OK response.
          headers:
            # Enable CORS
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  request:
                    $ref: "#/components/schemas/Body0"
                  message:
                    type: string
                # Only Request Validation, so not work...
                required:
                  - message
        400:
          description: 400 Bad Request response.
      security: []
      x-amazon-apigateway-request-validator: all
      # Integration
      x-amazon-apigateway-integration:
        type: mock
        # Request
        requestTemplates:
          application/json: |-
            #set($context.requestOverride.path.body = $input.body)
            {
              "statusCode": 200
            }
        # Response
        responses:
          default:
            statusCode: 200
            responseParameters:
              # Enable CORS
              # If do not specify this in post method, return 500 Internal Server Error.
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |-
                #set($body = $context.requestOverride.path.body)
                {
                  "request": $body,
                  "message": "Echo Request Body.($util.parseJson($body).name)"
                }
  # AWS Lambda
  # https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html
  /lambda:
    get:
      tags:
        - lambda
      summary: Test API Gateway to Lambda function (Get).
      operationId: GetLambda
      responses:
        200:
          description: 200 OK response.
          headers:
            Content-Type:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security: []
      x-amazon-apigateway-integration:
        # Custom Integration
        # User-defined Lambda event(Using 'Mapping Templates')
        #type: aws
        # Proxy Integration
        # System-defined Lambda event
        type: aws_proxy
        # Add permission to Lambda function.
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventJavaFunction.Arn}:live/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
    post:
      tags:
        - lambda
      summary: Test API Gateway to Lambda function (Post).
      operationId: PostLambda
      responses:
        200:
          description: 200 OK response.
          headers:
            # Enable CORS
            Access-Control-Allow-Origin:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security: []
      x-amazon-apigateway-integration:
        # Custom Integration
        #type: aws
        # Proxy Integration
        type: aws_proxy
        # Add permission to Lambda function.
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventFunction.Arn}/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
    put:
      tags:
        - lambda
      summary: Test API Gateway to Lambda function (Put).
      operationId: PutLambda
      responses:
        200:
          description: 200 OK response.
          headers:
            # Enable CORS
            Access-Control-Allow-Origin:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security: []
      x-amazon-apigateway-integration:
        # Custom Integration
        #type: aws
        # Proxy Integration
        type: aws_proxy
        # Add permission to Lambda function.
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventPythonFunction.Arn}/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
  # REST API
  /users:
    get:
      tags:
        - REST API
      summary: Get users.
      description: |
        Get **users**.
      operationId: GetUsers
      parameters:
        - name: version
          in: query
          description: Version
          schema:
            type: string
      responses:
        200:
          description: 200 OK response.
          headers:
            Content-Type:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security:
        # https://swagger.io/docs/specification/authentication/#using-multiple-authentication-types
        - apiKeyAuth: []
          bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventRestApiFunction.Arn}/invocations
        httpMethod: POST
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html
        # Do not work with 'type: aws_proxy'...
        requestParameters:
          # Only parameter mapping.
          integration.request.header.stage: method.request.querystring.version
        responses:
          default:
            statusCode: 200
    post:
      tags:
        - REST API
      summary: Post user.
      description: |
        Post **user**.
      operationId: PostUser
      responses:
        200:
          description: 200 OK response.
          headers:
            Content-Type:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security:
        - apiKeyAuth: []
          bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventRestApiFunction.Arn}/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
  /users/{userId}:
    get:
      tags:
        - REST API
      summary: Get user.
      description: |
        Get **user**.
      operationId: GetUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        200:
          description: 200 OK response.
          headers:
            Content-Type:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security:
        - apiKeyAuth: []
          bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventRestApiFunction.Arn}/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
    put:
      tags:
        - REST API
      summary: Put user.
      description: |
        Put **user**.
      operationId: PutUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        200:
          description: 200 OK response.
          headers:
            Content-Type:
              schema:
                type: string
        400:
          description: 400 Bad Request response.
      security:
        - apiKeyAuth: []
          bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventRestApiFunction.Arn}/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
  /users/{userId}/icon:
    get:
      tags:
        - REST API
      summary: Get user icon.
      description: |
        Get **user** icon.
      operationId: GetUserIcon
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        200:
          description: 200 OK response.
          content:
            image/png:
              schema:
                type: string
                format: binary
        400:
          description: 400 Bad Request response.
      security:
        - apiKeyAuth: []
          bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventRestApiFunction.Arn}/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
x-amazon-apigateway-binary-media-types:
  - image/png
components:
  schemas:
    Body0:
      # Schema Object is JSON Schema.
      type: object
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/Type"
      required:
        - name
    Type:
      type: string
      enum:
        - AAA
        - BBB
        - CCC
    UserId:
      type: string
      description: UUID format.
      maxLength: 36
      example: d85d9e9b-f82a-4a35-ad1d-d643a7e56359
  parameters:
    Parameter0:
      name: q0
      in: query
      required: true
      schema:
        type: string
        # Request Validation: not work...
        enum:
          - AAA
          - BBB
          - CCC
  requestBodies:
    Body0:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Body0"
      required: true
  securitySchemes:
    # API Keys
    # https://swagger.io/docs/specification/authentication/api-keys/
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    # Bearer Authentication
    # https://swagger.io/docs/specification/authentication/bearer-authentication/
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: test
    description: Test API Gateway.
  - name: lambda
    description: Test API Gateway to Lambda function.
  - name: REST API
    description: Test REST API.
# Request Validation
# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html
x-amazon-apigateway-request-validators:
  # Overwrites default name, but cannot be specified if undefined.
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
  # 'NONE' is duplicated if define NONE.
  NONE:
    validateRequestBody: false
    validateRequestParameters: false
# Sets all methods.
x-amazon-apigateway-request-validator: NONE
