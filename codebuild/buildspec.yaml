# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
version: 0.2

# [Docker images](https://github.com/aws/aws-codebuild-docker-images)

# Default is root user.
#run-as: root

env:
  shell: bash
  variables:
    TEST_VARIABLE: TesttesT

phases:
  install:
    # https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html
    runtime-versions:
      # Amazon Linux 2023 x86_64 standard:5.0
      dotnet: 6.0
      nodejs: 18
      python: 3.11
      java: corretto21
    commands:
      - echo "[Phase][install]commands (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
      - echo [ENV]TEST_VARIABLE=$TEST_VARIABLE
      - echo [ENV]umask=$(umask)
      # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
      - echo [ENV][AWS]CODEBUILD_SRC_DIR=$CODEBUILD_SRC_DIR
      - echo [ENV][AWS]AWS_EXECUTION_ENV=$AWS_EXECUTION_ENV
      # AWS
      - echo [CLI]$(aws --version)
      - echo [SAM]$(sam --version)
      # .NET
      - echo [.NET]$(dotnet --version)
      # Node.js
      - n 18
      - echo [Node.js]$(node --version)
      - echo [npm]$(npm --version)
      # Python
      - echo [Python]$(python --version)
      - echo [pip]$(pip --version)
      - echo [Python3]$(python3 --version)
      - echo [pip3]$(pip3 --version)
      - echo [sys.path]$(python -c "import sys;print(sys.path)")
      - echo [boto3]$(python -c "import boto3;print(boto3. __version__)")
      # Java
      - echo [Java]$(java --version)
      - echo [Gradle]$(gradle --version)
      - echo [Maven]$(mvn --version)
      # Git
      - echo [Git]$(git --version)
      # If use 'npm install' from CodeCommit.
      # - need AWSCodeCommitReadOnly
      # https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-https-unixes.html
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      # Add users.
      - useradd build-user
      - mkdir build && chown build-user:build-user $_
    finally:
      - echo "[Phase][install]finally (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
  pre_build:
    # We can switch user, but it is more restrictive...
    run-as: build-user
    commands:
      - echo "[Phase][pre_build]commands (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
      - echo [ENV]TEST_VARIABLE=$TEST_VARIABLE
      #
      - BUILD_ROOT_PATH=$PWD
      - cd build
      - touch a.txt
    finally:
      - echo "[Phase][pre_build]finally (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
  build:
    commands:
      - echo "[Phase][build]commands (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
      - echo [ENV]TEST_VARIABLE=$TEST_VARIABLE
      #
      - echo BUILD_ROOT_PATH=$BUILD_ROOT_PATH
      - cd $BUILD_ROOT_PATH
    finally:
      - echo "[Phase][build]finally (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
  post_build:
    commands:
      - echo "[Phase][post_build]commands (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"
      - echo [ENV]TEST_VARIABLE=$TEST_VARIABLE
    finally:
      - echo "[Phase][post_build]finally (USER=$USER,PWD=$PWD,HOME=$HOME,SHELL=$SHELL)(whoami=$(whoami),date=$(date))"

# https://docs.aws.amazon.com/codebuild/latest/userguide/test-reporting.html
# https://docs.aws.amazon.com/codebuild/latest/userguide/code-coverage-report.html
reports:
  # .NET
  # --logger "trx;logfilename=results.trx" --results-directory ./reports
  dotnet_reports:
    files:
      - results.trx
    file-format: VisualStudioTrx
    base-directory: dotnet/reports
  # --collect:"XPlat Code Coverage"
  dotnet-coverage_reports:
    files:
      - "**/coverage.cobertura.xml"
    file-format: CoberturaXML
    base-directory: dotnet/reports

  # Node.js
  # https://docs.aws.amazon.com/codebuild/latest/userguide/test-report-jest.html
  # "jest": {
  #   "reporters": [ "default", "jest-junit" ]
  # },
  # "jest-junit": {
  #   "outputDirectory": "<rootDir>/reports",
  #   "outputName": "results.xml"
  # }
  jest_reports:
    files:
      - results.xml
    file-format: JUNITXML
    base-directory: nodejs/reports
  # "jest": {
  #   "coverageDirectory": "<rootDir>/reports/coverage",
  # }
  jest-coverage_reports:
    files:
      - clover.xml
    file-format: CLOVERXML
    base-directory: nodejs/reports/coverage

  # Python
  # https://docs.aws.amazon.com/codebuild/latest/userguide/test-report-pytest.html
  # --junitxml=reports/results.xml
  pytest_reports:
    files:
      - results.xml
    file-format: JUNITXML
    base-directory: python/reports
  # --cov-report=xml:reports/coverage.xml
  pytest-cov_reports:
    files:
      - coverage.xml
    file-format: COBERTURAXML
    base-directory: python/reports

  # Java
  junit_reports:
    files:
      - "**/*.xml"
    file-format: JUNITXML
    base-directory: java/build/test-results
  # jacocoTestReport {
  #     reports {
  #         xml.required = true
  #     }
  # }
  jacoco_reports:
    files:
      - "**/jacocoTestReport.xml"
    file-format: JACOCOXML
    base-directory: java/build/reports/jacoco
